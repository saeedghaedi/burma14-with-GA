import numpy as np
from itertools import permutations

def calculate_distance(cities, order):
    total_distance = 0
    num_cities = len(order)
    for i in range(num_cities):
        city1 = order[i]
        city2 = order[(i + 1) % num_cities]
        total_distance += np.linalg.norm(cities[city1] - cities[city2])
    return total_distance

def genetic_algorithm(cities, population_size, generations):
    num_cities = len(cities)
    population = np.array([np.random.permutation(num_cities) for _ in range(population_size)])
    for _ in range(generations):
        fitness = np.array([1 / calculate_distance(cities, order) for order in population])
        elite_indices = np.argsort(fitness)[::-1][:2] # Select the top 2 elite individuals
        elite_population = population[elite_indices]
        parents = np.random.choice(population_size, size=(population_size - 2, 2), replace=True, p=fitness / fitness.sum())
        children = []
        for parent1_idx, parent2_idx in parents:
            crossover_point = np.random.randint(1, num_cities)
            child = np.hstack((elite_population[parent1_idx][:crossover_point], elite_population[parent2_idx][crossover_point:]))
            children.append(child)
        population = np.vstack((elite_population, np.array(children)))
    best_order = elite_population[np.argmax([calculate_distance(cities, order) for order in elite_population])]
    return best_order, calculate_distance(cities, best_order)

if __name__ == "__main__":
    # Define the cities and their coordinates
    cities = {
        0: np.array([16.47, 96.10]),
        1: np.array([16.47, 94.44]),
        2: np.array([20.09, 92.54]),
        3: np.array([22.39, 93.37]),
        4: np.array([25.23, 97.24]),
        5: np.array([22.00, 96.05]),
        6: np.array([20.47, 97.02]),
        7: np.array([17.20, 96.29]),
        8: np.array([16.30, 97.38]),
        9: np.array([14.05, 98.12]),
        10: np.array([16.53, 97.38]),
        11: np.array([21.52, 95.59]),
        12: np.array([19.41, 97.13]),
        13: np.array([20.09, 94.55])
    }

    # Set the parameters for the genetic algorithm
    population_size = 100
    generations = 500

    # Run the genetic algorithm
    best_order, shortest_distance = genetic_algorithm(cities, population_size, generations)

    print("Shortest Distance:", shortest_distance)
    print("Best Order:", best_order)
